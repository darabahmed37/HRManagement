@{
    ViewData["Title"] = "Create Employee";
    var designation = ((ViewData["Designation"] as IEnumerable<DesignationModel>)!).ToList();
    
}
@inject IHttpContextAccessor ContextAccessor

@section Style {

    <style>
        .body-background {
            background-color: #f5f5f5;
            height: 100%
        }

        .form-item {
            width: 20em;
        }

        .employeeForm {
            flex-wrap: wrap;
            gap: 2em;
        }
    </style>
}


<div class="body-background">
    <form id="add-employee" aria-disabled="True">
        <h3 class="text-dark p-5">
            Employee Page
        </h3>
        <div class="bg-white p-5 shadow p-3 mb-4 bg-white rounded mx-5">
            <h4>Employee Information</h4>
            <hr />
            <div class="row mt-5 pl-4 employeeForm">
                <div class="form-item">
                    @Html.Label("Employee Code")
                    <input class="form-control" placeholder="Employee Code" name="Employee Code" id="emp-code" />

                </div>
                <div class="form-item">
                    @Html.Label("Employee Name")
                    <input class="form-control" placeholder="Employee Name" name="Employee Name" />

                </div>
                <div class="form-item">
                    @Html.Label("Appointed By")
                    <input class="form-control" placeholder="Appointed By" name="Appointed By" />

                </div>
                <div class="form-item">
                    @Html.Label("Join Date")
                    <input class="form-control" name="Join Date" type="date" />

                </div>
                <div class="form-item">
                    @Html.Label("Qualification")
                    <select class="form-control" name="Qualification">
                        <option value="Graduation">Graduation</option>
                        <option value="Intermediate">Intermediate</option>
                        <option value="Matriculation">Matriculation</option>

                    </select>

                </div>
                <div class="form-item">
                    @Html.Label("Gender")
                    <select class="form-control" name="Gender">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Others">Others</option>

                    </select>

                </div>
                <div class="form-item">
                    @Html.Label("DOB Date")
                    <input class="form-control" name="DOB Date" type="date" />

                </div>
                <div class="form-item">
                    @Html.Label("Religion")
                    <select class="form-control" name="Religion">
                        <option value="Islam">Islam</option>
                        <option value="Christianity">Christianity</option>
                        <option value="Others">Others</option>

                    </select>

                </div>
                <div class="form-item">
                    @Html.Label("Marital Status")
                    <select class="form-control" name="Marital Status">
                        <option value="Single">Single</option>
                        <option value="Married">Married</option>
                        <option value="Windowed">Windowed</option>
                        <option value="Separated">Separated</option>

                    </select>

                </div>

                <div class="form-item custom-file">
                    @Html.Label("Employee Picture")
                    <input type="file" />
                </div>
                
                <div class="form-item">
                    @Html.Label("Designation")
                    <select class="form-control" name="Designation" id="Designation">
                        @foreach (var item in designation) {
                            <option value="@item.ID">@item.DesignationName</option>
                        }
                        
                        @if (designation.Count == 0) {
                            <option value="0">No Designation</option>
                        }

                    </select>

                </div>
            </div>

        </div>
        <div class="bg-white p-5 shadow p-3 mb-2 bg-white rounded mx-5">
            <h4>Contact Information</h4>
            <hr />
            <div class="row my-5 pl-4 employeeForm">
                <div class="form-item">
                    @Html.Label("Country")
                    <input class="form-control" placeholder="Country" name="Country" />

                </div>
                <div class="form-item">
                    @Html.Label("City")
                    <input class="form-control" placeholder="City" name="City" />

                </div>
                <div class="form-item">
                    @Html.Label("Land Line")
                    <input class="form-control" placeholder="Land Line" name="Land Line" />

                </div>
                <div class="form-item">
                    @Html.Label("Mobile")
                    <input class="form-control" type="tel" placeholder="Mobile" name="Mobile" />

                </div>

                <div class="form-item">
                    @Html.Label("Address")
                    <textarea class="form-control" rows="2" cols="6" placeholder="Address" name="Address"></textarea>

                </div>

            </div>
        </div>
        <hr />
        <div class="px-5 pb-5" id="button-group">
            <button class="btn btn-primary" id="newEmp-btn">Add New</button>

            <button class="btn btn-primary" id="viewEmp-btn">View</button>
        </div>
    
    </form>

</div>

@section Scripts{
    <script>
        let form = $("#add-employee");
        let addBtn = $("#newEmp-btn");
        let updateBtn = $("#updateEmp-btn");
        let deleteBtn = $("#deleteEmp-btn");
        let viewBtn = $("#viewEmp-btn");

        function setInput(name, data) {
            const value = $(`#add-employee input[name='${name}'] ,#add-employee textarea[name='${name}']`);
            value.val(data);
        }

        function setOption(name, data) {
            const value = $(`#add-employee select[name='${name}']`);
            $(`#add-employee option[value='${data}']`).prop("selected", true);
            value.val(data).change();
        }

        function setDate(name, data) {
            const value = document.querySelector(`#add-employee input[name='${name}']`);
            const date = new Date(data);
            value.valueAsDate = date
        }

        function populate(response) {
            setDate("Join Date", response.joinDate);
            setDate("DOB Date", response.dobDate);
            setInput("Address", response.address);
            setInput("Mobile", response.mobile);
            setInput("Land Line", response.landline);
            setInput("Country", response.country);
            setInput("City", response.city);
            setInput("Appointed By", response.appointedBy);
            setInput("Employee Name", response.name);
            setInput("Address", response.address);
            setOption("Gender", response.gender);
            setOption("Qualification", response.qualification);
            setOption("Religion", response.religion);
            setOption("Marital_Status", response.maritalStatus);
            const image = $(`<img src="${response.employeePicture}"  style="width:10em"/>`)
            $(".custom-file").append(image).css({
    
                "width":"100%",
                "justify-content":"center",
            });

        }

        function toggleForm(mode) {
            const input = form.find("input");
            const view = $("#add-employee :not(#emp-code, button)").prop("disabled", mode);
        }


        function validate() {
            form.validate({
                errorClass: "is-invalid text-danger",
                rules: {
                    "Employee Code": {
                        required: true,
                        minlength: 1,
                        maxlength: 10
                    },
                    "Employee Name": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "Appointed By": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "Country": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "City": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "Land Line": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "Mobile": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "Address": {
                        required: true,
                        minlength: 3,
                        maxlength: 10
                    },
                    "DOB Date": {
                        date: true,
                        required: true,
                    },
                    "Join Date": {
                        date: true,
                        required: true,
                    }
                },
                messages: {
                    "Employee Code": {
                        required: "Employee Code is required",
                        minlength: "Employee Code must be at least 3 characters",
                        maxlength: "Employee Code must be at most 10 characters"
                    },
                    "Employee Name": {
                        required: "Employee Name is required",
                        minlength: "Employee Name must be at least 3 characters",
                        maxlength: "Employee Name must be at most 10 characters"
                    },
                    "Appointed By": {
                        required: "Appointed By is required",
                        minlength: "Appointed By must be at least 3 characters",
                        maxlength: "Appointed By must be at most 10 characters"
                    },
                    "Country": {
                        required: "Country is required",
                        minlength: "Country must be at least 3 characters",
                        maxlength: "Country must be at most 10 characters"
                    },
                    "City": {
                        required: "City is required",
                        minlength: "City must be at least 3 characters",
                        maxlength: "City must be at most 10 characters"
                    },
                    "Land Line": {
                        required: "Land Line is required",
                        minlength: "Land Line must be at least 3 characters",
                        maxlength: "Land Line must be at most 10 characters"
                    },
                    "Mobile": {
                        required: "Mobile is required",
                        minlength: "Mobile must be at least 3 characters",
                        maxlength: "Mobile must be at most 10 characters"
                    },
                    "Address": {
                        required: "Address is required",
                        minlength: "Address must be at least 3 characters",
                        maxlength: "Address must be at most 10 characters"
                    }
                }
            });


        }

        function returnSelectToJson() {
            const select = $("#add-employee select");
            const selectedOptions = $("#add-employee select option:selected");
            const output = {};
            const keys = Object.keys(select);
            keys.splice(keys.length - 2);
            keys.forEach(key => {
                output[select[key]["name"]] = selectedOptions[key].value;
            });
            return output;
        }

        async function addEmployeeSubmit(e) {
            let data = form.serializeJSON();
            const imageString = "";
            //await toBase64(document.querySelector("#add-employee input[type=file]"))
            const selectOptions = returnSelectToJson();

            data = {
                Name: data["Employee Name"],
                Code: data["Employee Code"],
                AppointedBy: data["Appointed By"],
                Country: data["Country"],
                City: data["City"],
                LandLine: data["Land Line"],
                Mobile: data["Mobile"],
                Address: data["Address"],
                DOB: data["DOB Date"],
                JoinDate: data["Join Date"],
                EmployeePicture: imageString,
                MaritalStatus: selectOptions["Marital Status"],


            };


            delete selectOptions["Marital Status"];
            data = { ...data, ...selectOptions };
             
            e.preventDefault();
            if (true) {
                
                $.ajax({
                    url: `@Url.Action("AddEmployee")`,
                    type: "POST",

                    headers: {
                        "Content-Type": "application/json",
                        'Accept': 'application/json',
                    },
                    data: JSON.stringify(
                        data
                    ),
                    success: function (result) {
                        if (result) {
                            alert("Employee Added Successfully");
                        } else {
                            alert("Employee Addition Failed");
                        }
                    }
                });

            }
        }


        function updateEmployeeSubmit(e) {
            let data = form.serializeJSON();
            data = { ...data, ...returnSelectToJson() };
            e.preventDefault();
            form.valid();
            $.ajax({
                url: `@Url.Action("UpdateEmployee")`,
                type: "POST",
                data: {
                    employee: data
                },
                success: function (result) {
                    if (result) {
                        alert("Employee Updated Successfully");
                    } else {
                        alert("Employee Update Failed");
                    }
                }
            });

        }

        function getEmployeeById(e) {
            e.preventDefault();
            $("#emp-code").prop("disabled", true);
            const id = $("#emp-code").val();
            const update = $(`<button class="btn btn-primary" style='margin-left:1em' id="updateEmp-btn">Update</button>`);
            const deleteBtn = $(`<button class="btn btn-primary" type="submit" style='margin-left:1em' id="deleteEmp-btn">Delete</button>`);
            $("#newEmp-btn").css("display", "none");
            $("#viewEmp-btn").css("display", "none");

            deleteBtn.click((e) => {
                e.preventDefault()
                $.ajax({
                    url: `@Url.Action("DeleteEmployeeById")?id=${id}`,
                    type: "Delete",
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    success: function (response) {
                        alert("Deleted");;

                    },
                    error: function (error) {
                        form.validate().showErrors({
                            "Employee Code": "Employee Code does not exist"
                        });
                    }

                });
            })
            $("#button-group").append(deleteBtn, update);



            if (form.valid()) {
                $.ajax({
                    url: `@Url.Action("GetEmployeeById")`,
                    type: "GET",
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    data: {
                        id
                    },
                    success: function (response) {

                        populate(response);
                        toggleForm(false)

                    },
                    error: function (error) {
                        form.validate().showErrors({
                            "Employee Code": "Employee Code does not exist"
                        });
                    }

                });
            }
        }

        function addEmployee(e) {
            e.preventDefault();
            toggleForm(false);
            $("#emp-code").prop("disabled", true);
            $("#button-group").empty();

            const cancel = $(`<button class="btn btn-primary" style='margin-left:1em' id="cancelEmp">Cancel</button>`);
            const save = $(`<button class="btn btn-primary" id="saveEmp">Save</button>`);
            $("#button-group").append(save, cancel);
            cancel.click(e => {
                window.location.reload();
            })
            $("#saveEmp").click(addEmployeeSubmit);


        }


        $(document).ready(function () {
            validate();
            toggleForm(true);
            viewBtn.click(getEmployeeById);
            addBtn.click(addEmployee);


        });

        const toBase64 = file => new Promise((resolve, reject) => {
            debugger 
            file = file.files[0];
            const reader = new FileReader();
            reader.readAsDataURL(file);


            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    </script>
}